// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // decode instruction
    // instruction[15] = i-bit: instruction type, 0 for A-instruction and
    //                 1 for C-instruction, 
    // instruction[0..14] = 15-bit constant for A-instruction
    // else C-instruction:
    // instruction[12] = comp a-bit
    // instruction[6..11] = comp c-bits
    // instruction[3..5] = dest
    // instrction[0..2] = jump

    Not(in = instruction[15], out = AInstruction);
    Not(in = AInstruction, out = CInstruction);

    // ARegister
    Mux16(a = instruction,
          b = aluOutput,
          sel = CInstruction,
          out = ARegInput);

    Or(a = AInstruction, b = instruction[5], out = loadAReg);
    ARegister(in = ARegInput,
              load = loadAReg,
              out = regAOut,
              out[0..14] = addressM);

    // DRegister
    And(a = instruction[4], b = CInstruction, out = loadDReg);
    DRegister(in = aluOutput, load = loadDReg, out = regDOut);

    // ALU A/M Input
    Mux16(b = inM, a = regAOut, sel = instruction[12], out = aluAMInput);

    // ALU
    ALU(x = regDOut, y = aluAMInput,
        zx = instruction[11], // zero the x input
        nx = instruction[10], // negate x input
        zy = instruction[9], // zero the y input
        ny = instruction[8], // negate y input
        f  = instruction[7], // function code: 1 for add, 0 for and
        no = instruction[6], // negate output
        out = aluOutput,
        out = outM,
        zr = aluZero,
        ng = aluNeg);

    Not(in = aluNeg, out = aluPos);

    // jmp codes
    And(a = instruction[2], b = aluNeg,  out = jumpNeg);
    And(a = instruction[1], b = aluZero, out = jumpZero);

    // handle edge case - zero is also positive
    Not(in = aluZero, out = notZero);
    And(a = aluPos, b = notZero, out = exclPos);
    And(a = instruction[0], b = exclPos,  out = jumpPos);

    Or(a = jumpNeg, b = jumpZero, out = jw1);
    Or(a = jw1, b = jumpPos, out = jmp);
    And(a = jmp, b = CInstruction, out = jump);

    Not(in = jump, out = notJump);

    // program counter
    PC(in = regAOut,
       load = jump,
       inc = notJump,
       reset = reset,
       out[0..14] = pc);

    // writeM is instruction[3]
    And(a = instruction[3], b = CInstruction, out = writeM);
}