// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // can use mux based on high order bits to select output
    // x0 - x3fff is RAM
    // so that's the first 14 bits if the top bit is low
    // screen -
    // 0x4000 - 0x5fff
    // 0100 0000 0000 0000 - 0101 1111 1111 1111
    // first 13 bits if top bit is high
    // keyboard
    // 0x6000 - top two bits are high

    // mux load signal, And'ed with nand of top bits 
    Nand(a = address[13], b = address[14], out = notTopBits);
    And(a = load, b = notTopBits, out = loadEn);
    DMux(in = loadEn, sel = address[14], a = loadRam, b = loadScreen);

    // logic to select memory regions
    // RAM
    Not(in = address[14], out = ramSelect);
    RAM16K(in = in, load = loadRam, address = address[0..13], out = ramOut);

    // screen
    Screen(in = in, load = loadScreen, address = address[0..12], out = screenOut);

    // keyboard
    Keyboard(out = kbd);

    // mux output
    Mux16(a = screenOut, b = ramOut, sel = ramSelect, out = ramScreen);
    Not(in = notTopBits, out = kbdOutSel);
    Mux16(a = ramScreen, b = kbd, sel = kbdOutSel, out = out); 

    
    

}